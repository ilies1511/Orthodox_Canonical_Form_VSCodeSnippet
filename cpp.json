{
    // Place your global snippets here. Each snippet is defined under a snippet name and has a scope, prefix, body and
    // description. Add comma separated ids of the languages where the snippet is applicable in the scope field. If scope
    // is left empty or omitted, the snippet gets applied to all languages. The prefix is what is
    // used to trigger the snippet and the body will be expanded and inserted. Possible variables are:
    // $1, $2 for tab stops, $0 for the final cursor position, and ${1:label}, ${2:another} for placeholders.
    // Placeholders with the same ids are connected.
    // Example:
    "a": {
        "prefix": "examh",
        "body": [
            "#ifndef ${TM_FILENAME_BASE}_HPP"
            "# define ${TM_FILENAME_BASE}_HPP",
            "",
            "class ${TM_FILENAME_BASE} {",
            "  public:",
            "      ${TM_FILENAME_BASE}();",
            "      ${TM_FILENAME_BASE}(const ${TM_FILENAME_BASE}& other);",
            "      ~${TM_FILENAME_BASE}();",
            "      ${TM_FILENAME_BASE}&    operator=(const ${TM_FILENAME_BASE}& other);",
            "};",
            "",
            "#endif"
        ],
        "description": "Log output to console"
    },
    "b": {
        "prefix": "examc",
        "body": [
            "#include \"${TM_FILENAME_BASE}.hpp\"",
            "",
            "${TM_FILENAME_BASE}::${TM_FILENAME_BASE}() {}",
            "${TM_FILENAME_BASE}::${TM_FILENAME_BASE}(const ${TM_FILENAME_BASE}& other) {}",
            "${TM_FILENAME_BASE}::~${TM_FILENAME_BASE}() {}",
            "${TM_FILENAME_BASE}&  ${TM_FILENAME_BASE}::operator=(const ${TM_FILENAME_BASE}& other) {}",
            "",
        ],
        "description": "Log output to console"
    }
}
